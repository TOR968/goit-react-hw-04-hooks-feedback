{"version":3,"sources":["feedback/Section.js","feedback/FeedbackOptions.js","feedback/Statistics.js","feedback/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","type","name","onClick","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","event","target","prevGood","prevNeutral","prevBad","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAaeA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,M,MCIUC,MAPf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OAAOC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAI,OAClC,wBAAQC,KAAK,SAASC,KAAMF,EAAiBG,QAASP,EAAtD,SACGI,EAAK,GAAGI,cAAgBJ,EAAKK,MAAM,IADCL,OCqB5BM,MAvBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,oDAEGC,EAFH,WCDSC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC6D3BC,MAxDf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNR,EADM,KACAS,EADA,OAEiBD,mBAAS,GAF1B,mBAENP,EAFM,KAEGS,EAFH,OAGSF,mBAAS,GAHlB,mBAGNN,EAHM,KAGDS,EAHC,KAsBPC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GAO1B,OACE,qCACE,cAAC,EAAD,CAASjB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAEY,OAAMC,UAASC,OAC1Bb,gBA9BiB,SAAAwB,GAEvB,OADaA,EAAMC,OAAOnB,MAExB,IAAK,OACHc,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHL,GAAW,SAAAM,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHL,GAAO,SAAAM,GAAO,OAAIA,EAAU,WAuB9B,cAAC,EAAD,CAAShC,MAAM,aAAf,SAC4B,IAAzB2B,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBApBDc,KAAKC,MAAc,IAAPnB,EAAcY,aC7BrCQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.08c7d4b5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return Object.keys(options).map(item => (\r\n    <button type=\"button\" name={item} key={item} onClick={onLeaveFeedback}>\r\n      {item[0].toUpperCase() + item.slice(1)}\r\n    </button>\r\n  ));\r\n}\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad:{bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>\r\n        Positive feedback:\r\n        {positivePercentage}%\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState } from 'react';\r\nimport Section from './feedback/Section';\r\nimport './feedback/feedback.css';\r\nimport FeedbackOptions from './feedback/FeedbackOptions';\r\nimport Statistics from './feedback/Statistics';\r\nimport Notification from './feedback/Notification';\r\n\r\nfunction App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const changeValueState = event => {\r\n    const name = event.target.name;\r\n    switch (name) {\r\n      case 'good':\r\n        setGood(prevGood => prevGood + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(prevNeutral => prevNeutral + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(prevBad => prevBad + 1);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return Math.round((good * 100) / countTotalFeedback());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={{ good, neutral, bad }}\r\n          onLeaveFeedback={changeValueState}\r\n        ></FeedbackOptions>\r\n      </Section>\r\n      <Section title=\"Statistics\">\r\n        {countTotalFeedback() === 0 ? (\r\n          <Notification message=\"No feedback given\"></Notification>\r\n        ) : (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          ></Statistics>\r\n        )}\r\n      </Section>\r\n    </>\r\n  );\r\n  // }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}